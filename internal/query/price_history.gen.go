// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"grocery-management/internal/models"
)

func newPriceHistory(db *gorm.DB, opts ...gen.DOOption) priceHistory {
	_priceHistory := priceHistory{}

	_priceHistory.priceHistoryDo.UseDB(db, opts...)
	_priceHistory.priceHistoryDo.UseModel(&models.PriceHistory{})

	tableName := _priceHistory.priceHistoryDo.TableName()
	_priceHistory.ALL = field.NewAsterisk(tableName)
	_priceHistory.ID = field.NewString(tableName, "id")
	_priceHistory.ProductID = field.NewString(tableName, "product_id")
	_priceHistory.OldPrice = field.NewFloat64(tableName, "old_price")
	_priceHistory.NewPrice = field.NewFloat64(tableName, "new_price")
	_priceHistory.EffectiveDate = field.NewTime(tableName, "effective_date")
	_priceHistory.EndDate = field.NewTime(tableName, "end_date")
	_priceHistory.IsCurrent = field.NewBool(tableName, "is_current")
	_priceHistory.VendorID = field.NewString(tableName, "vendor_id")
	_priceHistory.ContactID = field.NewString(tableName, "contact_id")
	_priceHistory.ChangeReason = field.NewString(tableName, "change_reason")
	_priceHistory.Notes = field.NewString(tableName, "notes")
	_priceHistory.CreatedAt = field.NewTime(tableName, "created_at")
	_priceHistory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_priceHistory.DeletedAt = field.NewField(tableName, "deleted_at")
	_priceHistory.CreatedBy = field.NewString(tableName, "created_by")
	_priceHistory.UpdatedBy = field.NewString(tableName, "updated_by")
	_priceHistory.DeletedBy = field.NewString(tableName, "deleted_by")

	_priceHistory.fillFieldMap()

	return _priceHistory
}

type priceHistory struct {
	priceHistoryDo

	ALL           field.Asterisk
	ID            field.String
	ProductID     field.String
	OldPrice      field.Float64
	NewPrice      field.Float64
	EffectiveDate field.Time
	EndDate       field.Time
	IsCurrent     field.Bool
	VendorID      field.String
	ContactID     field.String
	ChangeReason  field.String
	Notes         field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	CreatedBy     field.String
	UpdatedBy     field.String
	DeletedBy     field.String

	fieldMap map[string]field.Expr
}

func (p priceHistory) Table(newTableName string) *priceHistory {
	p.priceHistoryDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p priceHistory) As(alias string) *priceHistory {
	p.priceHistoryDo.DO = *(p.priceHistoryDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *priceHistory) updateTableName(table string) *priceHistory {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.ProductID = field.NewString(table, "product_id")
	p.OldPrice = field.NewFloat64(table, "old_price")
	p.NewPrice = field.NewFloat64(table, "new_price")
	p.EffectiveDate = field.NewTime(table, "effective_date")
	p.EndDate = field.NewTime(table, "end_date")
	p.IsCurrent = field.NewBool(table, "is_current")
	p.VendorID = field.NewString(table, "vendor_id")
	p.ContactID = field.NewString(table, "contact_id")
	p.ChangeReason = field.NewString(table, "change_reason")
	p.Notes = field.NewString(table, "notes")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.CreatedBy = field.NewString(table, "created_by")
	p.UpdatedBy = field.NewString(table, "updated_by")
	p.DeletedBy = field.NewString(table, "deleted_by")

	p.fillFieldMap()

	return p
}

func (p *priceHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *priceHistory) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["old_price"] = p.OldPrice
	p.fieldMap["new_price"] = p.NewPrice
	p.fieldMap["effective_date"] = p.EffectiveDate
	p.fieldMap["end_date"] = p.EndDate
	p.fieldMap["is_current"] = p.IsCurrent
	p.fieldMap["vendor_id"] = p.VendorID
	p.fieldMap["contact_id"] = p.ContactID
	p.fieldMap["change_reason"] = p.ChangeReason
	p.fieldMap["notes"] = p.Notes
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["created_by"] = p.CreatedBy
	p.fieldMap["updated_by"] = p.UpdatedBy
	p.fieldMap["deleted_by"] = p.DeletedBy
}

func (p priceHistory) clone(db *gorm.DB) priceHistory {
	p.priceHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p priceHistory) replaceDB(db *gorm.DB) priceHistory {
	p.priceHistoryDo.ReplaceDB(db)
	return p
}

type priceHistoryDo struct{ gen.DO }

type IPriceHistoryDo interface {
	gen.SubQuery
	Debug() IPriceHistoryDo
	WithContext(ctx context.Context) IPriceHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPriceHistoryDo
	WriteDB() IPriceHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPriceHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPriceHistoryDo
	Not(conds ...gen.Condition) IPriceHistoryDo
	Or(conds ...gen.Condition) IPriceHistoryDo
	Select(conds ...field.Expr) IPriceHistoryDo
	Where(conds ...gen.Condition) IPriceHistoryDo
	Order(conds ...field.Expr) IPriceHistoryDo
	Distinct(cols ...field.Expr) IPriceHistoryDo
	Omit(cols ...field.Expr) IPriceHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IPriceHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPriceHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPriceHistoryDo
	Group(cols ...field.Expr) IPriceHistoryDo
	Having(conds ...gen.Condition) IPriceHistoryDo
	Limit(limit int) IPriceHistoryDo
	Offset(offset int) IPriceHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPriceHistoryDo
	Unscoped() IPriceHistoryDo
	Create(values ...*models.PriceHistory) error
	CreateInBatches(values []*models.PriceHistory, batchSize int) error
	Save(values ...*models.PriceHistory) error
	First() (*models.PriceHistory, error)
	Take() (*models.PriceHistory, error)
	Last() (*models.PriceHistory, error)
	Find() ([]*models.PriceHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PriceHistory, err error)
	FindInBatches(result *[]*models.PriceHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PriceHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPriceHistoryDo
	Assign(attrs ...field.AssignExpr) IPriceHistoryDo
	Joins(fields ...field.RelationField) IPriceHistoryDo
	Preload(fields ...field.RelationField) IPriceHistoryDo
	FirstOrInit() (*models.PriceHistory, error)
	FirstOrCreate() (*models.PriceHistory, error)
	FindByPage(offset int, limit int) (result []*models.PriceHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPriceHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p priceHistoryDo) Debug() IPriceHistoryDo {
	return p.withDO(p.DO.Debug())
}

func (p priceHistoryDo) WithContext(ctx context.Context) IPriceHistoryDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p priceHistoryDo) ReadDB() IPriceHistoryDo {
	return p.Clauses(dbresolver.Read)
}

func (p priceHistoryDo) WriteDB() IPriceHistoryDo {
	return p.Clauses(dbresolver.Write)
}

func (p priceHistoryDo) Session(config *gorm.Session) IPriceHistoryDo {
	return p.withDO(p.DO.Session(config))
}

func (p priceHistoryDo) Clauses(conds ...clause.Expression) IPriceHistoryDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p priceHistoryDo) Returning(value interface{}, columns ...string) IPriceHistoryDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p priceHistoryDo) Not(conds ...gen.Condition) IPriceHistoryDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p priceHistoryDo) Or(conds ...gen.Condition) IPriceHistoryDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p priceHistoryDo) Select(conds ...field.Expr) IPriceHistoryDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p priceHistoryDo) Where(conds ...gen.Condition) IPriceHistoryDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p priceHistoryDo) Order(conds ...field.Expr) IPriceHistoryDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p priceHistoryDo) Distinct(cols ...field.Expr) IPriceHistoryDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p priceHistoryDo) Omit(cols ...field.Expr) IPriceHistoryDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p priceHistoryDo) Join(table schema.Tabler, on ...field.Expr) IPriceHistoryDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p priceHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPriceHistoryDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p priceHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IPriceHistoryDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p priceHistoryDo) Group(cols ...field.Expr) IPriceHistoryDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p priceHistoryDo) Having(conds ...gen.Condition) IPriceHistoryDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p priceHistoryDo) Limit(limit int) IPriceHistoryDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p priceHistoryDo) Offset(offset int) IPriceHistoryDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p priceHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPriceHistoryDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p priceHistoryDo) Unscoped() IPriceHistoryDo {
	return p.withDO(p.DO.Unscoped())
}

func (p priceHistoryDo) Create(values ...*models.PriceHistory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p priceHistoryDo) CreateInBatches(values []*models.PriceHistory, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p priceHistoryDo) Save(values ...*models.PriceHistory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p priceHistoryDo) First() (*models.PriceHistory, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PriceHistory), nil
	}
}

func (p priceHistoryDo) Take() (*models.PriceHistory, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PriceHistory), nil
	}
}

func (p priceHistoryDo) Last() (*models.PriceHistory, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PriceHistory), nil
	}
}

func (p priceHistoryDo) Find() ([]*models.PriceHistory, error) {
	result, err := p.DO.Find()
	return result.([]*models.PriceHistory), err
}

func (p priceHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PriceHistory, err error) {
	buf := make([]*models.PriceHistory, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p priceHistoryDo) FindInBatches(result *[]*models.PriceHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p priceHistoryDo) Attrs(attrs ...field.AssignExpr) IPriceHistoryDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p priceHistoryDo) Assign(attrs ...field.AssignExpr) IPriceHistoryDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p priceHistoryDo) Joins(fields ...field.RelationField) IPriceHistoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p priceHistoryDo) Preload(fields ...field.RelationField) IPriceHistoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p priceHistoryDo) FirstOrInit() (*models.PriceHistory, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PriceHistory), nil
	}
}

func (p priceHistoryDo) FirstOrCreate() (*models.PriceHistory, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PriceHistory), nil
	}
}

func (p priceHistoryDo) FindByPage(offset int, limit int) (result []*models.PriceHistory, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p priceHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p priceHistoryDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p priceHistoryDo) Delete(models ...*models.PriceHistory) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *priceHistoryDo) withDO(do gen.Dao) *priceHistoryDo {
	p.DO = *do.(*gen.DO)
	return p
}
