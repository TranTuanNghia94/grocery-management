// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	Category             *category
	Contact              *contact
	Grocery              *grocery
	Inventory            *inventory
	InventoryTransaction *inventoryTransaction
	Permission           *permission
	PriceHistory         *priceHistory
	Product              *product
	Role                 *role
	RolePermission       *rolePermission
	SchemaMigration      *schemaMigration
	User                 *user
	Vendor               *vendor
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Category = &Q.Category
	Contact = &Q.Contact
	Grocery = &Q.Grocery
	Inventory = &Q.Inventory
	InventoryTransaction = &Q.InventoryTransaction
	Permission = &Q.Permission
	PriceHistory = &Q.PriceHistory
	Product = &Q.Product
	Role = &Q.Role
	RolePermission = &Q.RolePermission
	SchemaMigration = &Q.SchemaMigration
	User = &Q.User
	Vendor = &Q.Vendor
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                   db,
		Category:             newCategory(db, opts...),
		Contact:              newContact(db, opts...),
		Grocery:              newGrocery(db, opts...),
		Inventory:            newInventory(db, opts...),
		InventoryTransaction: newInventoryTransaction(db, opts...),
		Permission:           newPermission(db, opts...),
		PriceHistory:         newPriceHistory(db, opts...),
		Product:              newProduct(db, opts...),
		Role:                 newRole(db, opts...),
		RolePermission:       newRolePermission(db, opts...),
		SchemaMigration:      newSchemaMigration(db, opts...),
		User:                 newUser(db, opts...),
		Vendor:               newVendor(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Category             category
	Contact              contact
	Grocery              grocery
	Inventory            inventory
	InventoryTransaction inventoryTransaction
	Permission           permission
	PriceHistory         priceHistory
	Product              product
	Role                 role
	RolePermission       rolePermission
	SchemaMigration      schemaMigration
	User                 user
	Vendor               vendor
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Category:             q.Category.clone(db),
		Contact:              q.Contact.clone(db),
		Grocery:              q.Grocery.clone(db),
		Inventory:            q.Inventory.clone(db),
		InventoryTransaction: q.InventoryTransaction.clone(db),
		Permission:           q.Permission.clone(db),
		PriceHistory:         q.PriceHistory.clone(db),
		Product:              q.Product.clone(db),
		Role:                 q.Role.clone(db),
		RolePermission:       q.RolePermission.clone(db),
		SchemaMigration:      q.SchemaMigration.clone(db),
		User:                 q.User.clone(db),
		Vendor:               q.Vendor.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Category:             q.Category.replaceDB(db),
		Contact:              q.Contact.replaceDB(db),
		Grocery:              q.Grocery.replaceDB(db),
		Inventory:            q.Inventory.replaceDB(db),
		InventoryTransaction: q.InventoryTransaction.replaceDB(db),
		Permission:           q.Permission.replaceDB(db),
		PriceHistory:         q.PriceHistory.replaceDB(db),
		Product:              q.Product.replaceDB(db),
		Role:                 q.Role.replaceDB(db),
		RolePermission:       q.RolePermission.replaceDB(db),
		SchemaMigration:      q.SchemaMigration.replaceDB(db),
		User:                 q.User.replaceDB(db),
		Vendor:               q.Vendor.replaceDB(db),
	}
}

type queryCtx struct {
	Category             ICategoryDo
	Contact              IContactDo
	Grocery              IGroceryDo
	Inventory            IInventoryDo
	InventoryTransaction IInventoryTransactionDo
	Permission           IPermissionDo
	PriceHistory         IPriceHistoryDo
	Product              IProductDo
	Role                 IRoleDo
	RolePermission       IRolePermissionDo
	SchemaMigration      ISchemaMigrationDo
	User                 IUserDo
	Vendor               IVendorDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Category:             q.Category.WithContext(ctx),
		Contact:              q.Contact.WithContext(ctx),
		Grocery:              q.Grocery.WithContext(ctx),
		Inventory:            q.Inventory.WithContext(ctx),
		InventoryTransaction: q.InventoryTransaction.WithContext(ctx),
		Permission:           q.Permission.WithContext(ctx),
		PriceHistory:         q.PriceHistory.WithContext(ctx),
		Product:              q.Product.WithContext(ctx),
		Role:                 q.Role.WithContext(ctx),
		RolePermission:       q.RolePermission.WithContext(ctx),
		SchemaMigration:      q.SchemaMigration.WithContext(ctx),
		User:                 q.User.WithContext(ctx),
		Vendor:               q.Vendor.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
