// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"grocery-management/internal/models"
)

func newVendor(db *gorm.DB, opts ...gen.DOOption) vendor {
	_vendor := vendor{}

	_vendor.vendorDo.UseDB(db, opts...)
	_vendor.vendorDo.UseModel(&models.Vendor{})

	tableName := _vendor.vendorDo.TableName()
	_vendor.ALL = field.NewAsterisk(tableName)
	_vendor.ID = field.NewString(tableName, "id")
	_vendor.Name = field.NewString(tableName, "name")
	_vendor.Code = field.NewString(tableName, "code")
	_vendor.Description = field.NewString(tableName, "description")
	_vendor.PhoneNumber = field.NewString(tableName, "phone_number")
	_vendor.Email = field.NewString(tableName, "email")
	_vendor.Website = field.NewString(tableName, "website")
	_vendor.City = field.NewString(tableName, "city")
	_vendor.State = field.NewString(tableName, "state")
	_vendor.Country = field.NewString(tableName, "country")
	_vendor.Address = field.NewString(tableName, "address")
	_vendor.Status = field.NewString(tableName, "status")
	_vendor.CreatedAt = field.NewTime(tableName, "created_at")
	_vendor.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vendor.DeletedAt = field.NewField(tableName, "deleted_at")
	_vendor.CreatedBy = field.NewString(tableName, "created_by")
	_vendor.UpdatedBy = field.NewString(tableName, "updated_by")
	_vendor.DeletedBy = field.NewString(tableName, "deleted_by")

	_vendor.fillFieldMap()

	return _vendor
}

type vendor struct {
	vendorDo

	ALL         field.Asterisk
	ID          field.String
	Name        field.String
	Code        field.String
	Description field.String
	PhoneNumber field.String
	Email       field.String
	Website     field.String
	City        field.String
	State       field.String
	Country     field.String
	Address     field.String
	Status      field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	CreatedBy   field.String
	UpdatedBy   field.String
	DeletedBy   field.String

	fieldMap map[string]field.Expr
}

func (v vendor) Table(newTableName string) *vendor {
	v.vendorDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vendor) As(alias string) *vendor {
	v.vendorDo.DO = *(v.vendorDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vendor) updateTableName(table string) *vendor {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewString(table, "id")
	v.Name = field.NewString(table, "name")
	v.Code = field.NewString(table, "code")
	v.Description = field.NewString(table, "description")
	v.PhoneNumber = field.NewString(table, "phone_number")
	v.Email = field.NewString(table, "email")
	v.Website = field.NewString(table, "website")
	v.City = field.NewString(table, "city")
	v.State = field.NewString(table, "state")
	v.Country = field.NewString(table, "country")
	v.Address = field.NewString(table, "address")
	v.Status = field.NewString(table, "status")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.CreatedBy = field.NewString(table, "created_by")
	v.UpdatedBy = field.NewString(table, "updated_by")
	v.DeletedBy = field.NewString(table, "deleted_by")

	v.fillFieldMap()

	return v
}

func (v *vendor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vendor) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 18)
	v.fieldMap["id"] = v.ID
	v.fieldMap["name"] = v.Name
	v.fieldMap["code"] = v.Code
	v.fieldMap["description"] = v.Description
	v.fieldMap["phone_number"] = v.PhoneNumber
	v.fieldMap["email"] = v.Email
	v.fieldMap["website"] = v.Website
	v.fieldMap["city"] = v.City
	v.fieldMap["state"] = v.State
	v.fieldMap["country"] = v.Country
	v.fieldMap["address"] = v.Address
	v.fieldMap["status"] = v.Status
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["created_by"] = v.CreatedBy
	v.fieldMap["updated_by"] = v.UpdatedBy
	v.fieldMap["deleted_by"] = v.DeletedBy
}

func (v vendor) clone(db *gorm.DB) vendor {
	v.vendorDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vendor) replaceDB(db *gorm.DB) vendor {
	v.vendorDo.ReplaceDB(db)
	return v
}

type vendorDo struct{ gen.DO }

type IVendorDo interface {
	gen.SubQuery
	Debug() IVendorDo
	WithContext(ctx context.Context) IVendorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVendorDo
	WriteDB() IVendorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVendorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVendorDo
	Not(conds ...gen.Condition) IVendorDo
	Or(conds ...gen.Condition) IVendorDo
	Select(conds ...field.Expr) IVendorDo
	Where(conds ...gen.Condition) IVendorDo
	Order(conds ...field.Expr) IVendorDo
	Distinct(cols ...field.Expr) IVendorDo
	Omit(cols ...field.Expr) IVendorDo
	Join(table schema.Tabler, on ...field.Expr) IVendorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVendorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVendorDo
	Group(cols ...field.Expr) IVendorDo
	Having(conds ...gen.Condition) IVendorDo
	Limit(limit int) IVendorDo
	Offset(offset int) IVendorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVendorDo
	Unscoped() IVendorDo
	Create(values ...*models.Vendor) error
	CreateInBatches(values []*models.Vendor, batchSize int) error
	Save(values ...*models.Vendor) error
	First() (*models.Vendor, error)
	Take() (*models.Vendor, error)
	Last() (*models.Vendor, error)
	Find() ([]*models.Vendor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Vendor, err error)
	FindInBatches(result *[]*models.Vendor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Vendor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVendorDo
	Assign(attrs ...field.AssignExpr) IVendorDo
	Joins(fields ...field.RelationField) IVendorDo
	Preload(fields ...field.RelationField) IVendorDo
	FirstOrInit() (*models.Vendor, error)
	FirstOrCreate() (*models.Vendor, error)
	FindByPage(offset int, limit int) (result []*models.Vendor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVendorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vendorDo) Debug() IVendorDo {
	return v.withDO(v.DO.Debug())
}

func (v vendorDo) WithContext(ctx context.Context) IVendorDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vendorDo) ReadDB() IVendorDo {
	return v.Clauses(dbresolver.Read)
}

func (v vendorDo) WriteDB() IVendorDo {
	return v.Clauses(dbresolver.Write)
}

func (v vendorDo) Session(config *gorm.Session) IVendorDo {
	return v.withDO(v.DO.Session(config))
}

func (v vendorDo) Clauses(conds ...clause.Expression) IVendorDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vendorDo) Returning(value interface{}, columns ...string) IVendorDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vendorDo) Not(conds ...gen.Condition) IVendorDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vendorDo) Or(conds ...gen.Condition) IVendorDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vendorDo) Select(conds ...field.Expr) IVendorDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vendorDo) Where(conds ...gen.Condition) IVendorDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vendorDo) Order(conds ...field.Expr) IVendorDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vendorDo) Distinct(cols ...field.Expr) IVendorDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vendorDo) Omit(cols ...field.Expr) IVendorDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vendorDo) Join(table schema.Tabler, on ...field.Expr) IVendorDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vendorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVendorDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vendorDo) RightJoin(table schema.Tabler, on ...field.Expr) IVendorDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vendorDo) Group(cols ...field.Expr) IVendorDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vendorDo) Having(conds ...gen.Condition) IVendorDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vendorDo) Limit(limit int) IVendorDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vendorDo) Offset(offset int) IVendorDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vendorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVendorDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vendorDo) Unscoped() IVendorDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vendorDo) Create(values ...*models.Vendor) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vendorDo) CreateInBatches(values []*models.Vendor, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vendorDo) Save(values ...*models.Vendor) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vendorDo) First() (*models.Vendor, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Vendor), nil
	}
}

func (v vendorDo) Take() (*models.Vendor, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Vendor), nil
	}
}

func (v vendorDo) Last() (*models.Vendor, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Vendor), nil
	}
}

func (v vendorDo) Find() ([]*models.Vendor, error) {
	result, err := v.DO.Find()
	return result.([]*models.Vendor), err
}

func (v vendorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Vendor, err error) {
	buf := make([]*models.Vendor, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vendorDo) FindInBatches(result *[]*models.Vendor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vendorDo) Attrs(attrs ...field.AssignExpr) IVendorDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vendorDo) Assign(attrs ...field.AssignExpr) IVendorDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vendorDo) Joins(fields ...field.RelationField) IVendorDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vendorDo) Preload(fields ...field.RelationField) IVendorDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vendorDo) FirstOrInit() (*models.Vendor, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Vendor), nil
	}
}

func (v vendorDo) FirstOrCreate() (*models.Vendor, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Vendor), nil
	}
}

func (v vendorDo) FindByPage(offset int, limit int) (result []*models.Vendor, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vendorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vendorDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vendorDo) Delete(models ...*models.Vendor) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vendorDo) withDO(do gen.Dao) *vendorDo {
	v.DO = *do.(*gen.DO)
	return v
}
