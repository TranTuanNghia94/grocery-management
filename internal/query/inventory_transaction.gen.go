// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"grocery-management/internal/models"
)

func newInventoryTransaction(db *gorm.DB, opts ...gen.DOOption) inventoryTransaction {
	_inventoryTransaction := inventoryTransaction{}

	_inventoryTransaction.inventoryTransactionDo.UseDB(db, opts...)
	_inventoryTransaction.inventoryTransactionDo.UseModel(&models.InventoryTransaction{})

	tableName := _inventoryTransaction.inventoryTransactionDo.TableName()
	_inventoryTransaction.ALL = field.NewAsterisk(tableName)
	_inventoryTransaction.ID = field.NewString(tableName, "id")
	_inventoryTransaction.GroceryID = field.NewString(tableName, "grocery_id")
	_inventoryTransaction.ProductID = field.NewString(tableName, "product_id")
	_inventoryTransaction.Sku = field.NewString(tableName, "sku")
	_inventoryTransaction.Barcode = field.NewString(tableName, "barcode")
	_inventoryTransaction.CategoryID = field.NewString(tableName, "category_id")
	_inventoryTransaction.OldQuantity = field.NewInt32(tableName, "old_quantity")
	_inventoryTransaction.NewQuantity = field.NewInt32(tableName, "new_quantity")
	_inventoryTransaction.QuantityChange = field.NewInt32(tableName, "quantity_change")
	_inventoryTransaction.UnitPrice = field.NewFloat64(tableName, "unit_price")
	_inventoryTransaction.TransactionType = field.NewString(tableName, "transaction_type")
	_inventoryTransaction.TransactionDate = field.NewTime(tableName, "transaction_date")
	_inventoryTransaction.CreatedBy = field.NewString(tableName, "created_by")
	_inventoryTransaction.UpdatedBy = field.NewString(tableName, "updated_by")
	_inventoryTransaction.CreatedAt = field.NewTime(tableName, "created_at")
	_inventoryTransaction.UpdatedAt = field.NewTime(tableName, "updated_at")

	_inventoryTransaction.fillFieldMap()

	return _inventoryTransaction
}

type inventoryTransaction struct {
	inventoryTransactionDo

	ALL             field.Asterisk
	ID              field.String
	GroceryID       field.String
	ProductID       field.String
	Sku             field.String
	Barcode         field.String
	CategoryID      field.String
	OldQuantity     field.Int32
	NewQuantity     field.Int32
	QuantityChange  field.Int32
	UnitPrice       field.Float64
	TransactionType field.String
	TransactionDate field.Time
	CreatedBy       field.String
	UpdatedBy       field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (i inventoryTransaction) Table(newTableName string) *inventoryTransaction {
	i.inventoryTransactionDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inventoryTransaction) As(alias string) *inventoryTransaction {
	i.inventoryTransactionDo.DO = *(i.inventoryTransactionDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inventoryTransaction) updateTableName(table string) *inventoryTransaction {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.GroceryID = field.NewString(table, "grocery_id")
	i.ProductID = field.NewString(table, "product_id")
	i.Sku = field.NewString(table, "sku")
	i.Barcode = field.NewString(table, "barcode")
	i.CategoryID = field.NewString(table, "category_id")
	i.OldQuantity = field.NewInt32(table, "old_quantity")
	i.NewQuantity = field.NewInt32(table, "new_quantity")
	i.QuantityChange = field.NewInt32(table, "quantity_change")
	i.UnitPrice = field.NewFloat64(table, "unit_price")
	i.TransactionType = field.NewString(table, "transaction_type")
	i.TransactionDate = field.NewTime(table, "transaction_date")
	i.CreatedBy = field.NewString(table, "created_by")
	i.UpdatedBy = field.NewString(table, "updated_by")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *inventoryTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inventoryTransaction) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 16)
	i.fieldMap["id"] = i.ID
	i.fieldMap["grocery_id"] = i.GroceryID
	i.fieldMap["product_id"] = i.ProductID
	i.fieldMap["sku"] = i.Sku
	i.fieldMap["barcode"] = i.Barcode
	i.fieldMap["category_id"] = i.CategoryID
	i.fieldMap["old_quantity"] = i.OldQuantity
	i.fieldMap["new_quantity"] = i.NewQuantity
	i.fieldMap["quantity_change"] = i.QuantityChange
	i.fieldMap["unit_price"] = i.UnitPrice
	i.fieldMap["transaction_type"] = i.TransactionType
	i.fieldMap["transaction_date"] = i.TransactionDate
	i.fieldMap["created_by"] = i.CreatedBy
	i.fieldMap["updated_by"] = i.UpdatedBy
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i inventoryTransaction) clone(db *gorm.DB) inventoryTransaction {
	i.inventoryTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i inventoryTransaction) replaceDB(db *gorm.DB) inventoryTransaction {
	i.inventoryTransactionDo.ReplaceDB(db)
	return i
}

type inventoryTransactionDo struct{ gen.DO }

type IInventoryTransactionDo interface {
	gen.SubQuery
	Debug() IInventoryTransactionDo
	WithContext(ctx context.Context) IInventoryTransactionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInventoryTransactionDo
	WriteDB() IInventoryTransactionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInventoryTransactionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInventoryTransactionDo
	Not(conds ...gen.Condition) IInventoryTransactionDo
	Or(conds ...gen.Condition) IInventoryTransactionDo
	Select(conds ...field.Expr) IInventoryTransactionDo
	Where(conds ...gen.Condition) IInventoryTransactionDo
	Order(conds ...field.Expr) IInventoryTransactionDo
	Distinct(cols ...field.Expr) IInventoryTransactionDo
	Omit(cols ...field.Expr) IInventoryTransactionDo
	Join(table schema.Tabler, on ...field.Expr) IInventoryTransactionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryTransactionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInventoryTransactionDo
	Group(cols ...field.Expr) IInventoryTransactionDo
	Having(conds ...gen.Condition) IInventoryTransactionDo
	Limit(limit int) IInventoryTransactionDo
	Offset(offset int) IInventoryTransactionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryTransactionDo
	Unscoped() IInventoryTransactionDo
	Create(values ...*models.InventoryTransaction) error
	CreateInBatches(values []*models.InventoryTransaction, batchSize int) error
	Save(values ...*models.InventoryTransaction) error
	First() (*models.InventoryTransaction, error)
	Take() (*models.InventoryTransaction, error)
	Last() (*models.InventoryTransaction, error)
	Find() ([]*models.InventoryTransaction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.InventoryTransaction, err error)
	FindInBatches(result *[]*models.InventoryTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.InventoryTransaction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInventoryTransactionDo
	Assign(attrs ...field.AssignExpr) IInventoryTransactionDo
	Joins(fields ...field.RelationField) IInventoryTransactionDo
	Preload(fields ...field.RelationField) IInventoryTransactionDo
	FirstOrInit() (*models.InventoryTransaction, error)
	FirstOrCreate() (*models.InventoryTransaction, error)
	FindByPage(offset int, limit int) (result []*models.InventoryTransaction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInventoryTransactionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i inventoryTransactionDo) Debug() IInventoryTransactionDo {
	return i.withDO(i.DO.Debug())
}

func (i inventoryTransactionDo) WithContext(ctx context.Context) IInventoryTransactionDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inventoryTransactionDo) ReadDB() IInventoryTransactionDo {
	return i.Clauses(dbresolver.Read)
}

func (i inventoryTransactionDo) WriteDB() IInventoryTransactionDo {
	return i.Clauses(dbresolver.Write)
}

func (i inventoryTransactionDo) Session(config *gorm.Session) IInventoryTransactionDo {
	return i.withDO(i.DO.Session(config))
}

func (i inventoryTransactionDo) Clauses(conds ...clause.Expression) IInventoryTransactionDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inventoryTransactionDo) Returning(value interface{}, columns ...string) IInventoryTransactionDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inventoryTransactionDo) Not(conds ...gen.Condition) IInventoryTransactionDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inventoryTransactionDo) Or(conds ...gen.Condition) IInventoryTransactionDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inventoryTransactionDo) Select(conds ...field.Expr) IInventoryTransactionDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inventoryTransactionDo) Where(conds ...gen.Condition) IInventoryTransactionDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inventoryTransactionDo) Order(conds ...field.Expr) IInventoryTransactionDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inventoryTransactionDo) Distinct(cols ...field.Expr) IInventoryTransactionDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inventoryTransactionDo) Omit(cols ...field.Expr) IInventoryTransactionDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inventoryTransactionDo) Join(table schema.Tabler, on ...field.Expr) IInventoryTransactionDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inventoryTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryTransactionDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inventoryTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) IInventoryTransactionDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inventoryTransactionDo) Group(cols ...field.Expr) IInventoryTransactionDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inventoryTransactionDo) Having(conds ...gen.Condition) IInventoryTransactionDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inventoryTransactionDo) Limit(limit int) IInventoryTransactionDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inventoryTransactionDo) Offset(offset int) IInventoryTransactionDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inventoryTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryTransactionDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inventoryTransactionDo) Unscoped() IInventoryTransactionDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inventoryTransactionDo) Create(values ...*models.InventoryTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inventoryTransactionDo) CreateInBatches(values []*models.InventoryTransaction, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inventoryTransactionDo) Save(values ...*models.InventoryTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inventoryTransactionDo) First() (*models.InventoryTransaction, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.InventoryTransaction), nil
	}
}

func (i inventoryTransactionDo) Take() (*models.InventoryTransaction, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.InventoryTransaction), nil
	}
}

func (i inventoryTransactionDo) Last() (*models.InventoryTransaction, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.InventoryTransaction), nil
	}
}

func (i inventoryTransactionDo) Find() ([]*models.InventoryTransaction, error) {
	result, err := i.DO.Find()
	return result.([]*models.InventoryTransaction), err
}

func (i inventoryTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.InventoryTransaction, err error) {
	buf := make([]*models.InventoryTransaction, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inventoryTransactionDo) FindInBatches(result *[]*models.InventoryTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inventoryTransactionDo) Attrs(attrs ...field.AssignExpr) IInventoryTransactionDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inventoryTransactionDo) Assign(attrs ...field.AssignExpr) IInventoryTransactionDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inventoryTransactionDo) Joins(fields ...field.RelationField) IInventoryTransactionDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inventoryTransactionDo) Preload(fields ...field.RelationField) IInventoryTransactionDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inventoryTransactionDo) FirstOrInit() (*models.InventoryTransaction, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.InventoryTransaction), nil
	}
}

func (i inventoryTransactionDo) FirstOrCreate() (*models.InventoryTransaction, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.InventoryTransaction), nil
	}
}

func (i inventoryTransactionDo) FindByPage(offset int, limit int) (result []*models.InventoryTransaction, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inventoryTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inventoryTransactionDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inventoryTransactionDo) Delete(models ...*models.InventoryTransaction) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inventoryTransactionDo) withDO(do gen.Dao) *inventoryTransactionDo {
	i.DO = *do.(*gen.DO)
	return i
}
