// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"grocery-management/internal/models"
)

func newGrocery(db *gorm.DB, opts ...gen.DOOption) grocery {
	_grocery := grocery{}

	_grocery.groceryDo.UseDB(db, opts...)
	_grocery.groceryDo.UseModel(&models.Grocery{})

	tableName := _grocery.groceryDo.TableName()
	_grocery.ALL = field.NewAsterisk(tableName)
	_grocery.ID = field.NewString(tableName, "id")
	_grocery.Name = field.NewString(tableName, "name")
	_grocery.Description = field.NewString(tableName, "description")
	_grocery.Address = field.NewString(tableName, "address")
	_grocery.City = field.NewString(tableName, "city")
	_grocery.State = field.NewString(tableName, "state")
	_grocery.Country = field.NewString(tableName, "country")
	_grocery.PostalCode = field.NewString(tableName, "postal_code")
	_grocery.PhoneNumber = field.NewString(tableName, "phone_number")
	_grocery.Email = field.NewString(tableName, "email")
	_grocery.Position = field.NewString(tableName, "position")
	_grocery.OpeningHours = field.NewString(tableName, "opening_hours")
	_grocery.ClosingHours = field.NewString(tableName, "closing_hours")
	_grocery.IsOpen = field.NewBool(tableName, "is_open")
	_grocery.IsVerified = field.NewBool(tableName, "is_verified")
	_grocery.VerificationToken = field.NewString(tableName, "verification_token")
	_grocery.VerificationTokenExpiry = field.NewTime(tableName, "verification_token_expiry")
	_grocery.Status = field.NewString(tableName, "status")
	_grocery.CreatedAt = field.NewTime(tableName, "created_at")
	_grocery.UpdatedAt = field.NewTime(tableName, "updated_at")
	_grocery.DeletedAt = field.NewField(tableName, "deleted_at")

	_grocery.fillFieldMap()

	return _grocery
}

type grocery struct {
	groceryDo

	ALL                     field.Asterisk
	ID                      field.String
	Name                    field.String
	Description             field.String
	Address                 field.String
	City                    field.String
	State                   field.String
	Country                 field.String
	PostalCode              field.String
	PhoneNumber             field.String
	Email                   field.String
	Position                field.String
	OpeningHours            field.String
	ClosingHours            field.String
	IsOpen                  field.Bool
	IsVerified              field.Bool
	VerificationToken       field.String
	VerificationTokenExpiry field.Time
	Status                  field.String
	CreatedAt               field.Time
	UpdatedAt               field.Time
	DeletedAt               field.Field

	fieldMap map[string]field.Expr
}

func (g grocery) Table(newTableName string) *grocery {
	g.groceryDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g grocery) As(alias string) *grocery {
	g.groceryDo.DO = *(g.groceryDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *grocery) updateTableName(table string) *grocery {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.Name = field.NewString(table, "name")
	g.Description = field.NewString(table, "description")
	g.Address = field.NewString(table, "address")
	g.City = field.NewString(table, "city")
	g.State = field.NewString(table, "state")
	g.Country = field.NewString(table, "country")
	g.PostalCode = field.NewString(table, "postal_code")
	g.PhoneNumber = field.NewString(table, "phone_number")
	g.Email = field.NewString(table, "email")
	g.Position = field.NewString(table, "position")
	g.OpeningHours = field.NewString(table, "opening_hours")
	g.ClosingHours = field.NewString(table, "closing_hours")
	g.IsOpen = field.NewBool(table, "is_open")
	g.IsVerified = field.NewBool(table, "is_verified")
	g.VerificationToken = field.NewString(table, "verification_token")
	g.VerificationTokenExpiry = field.NewTime(table, "verification_token_expiry")
	g.Status = field.NewString(table, "status")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *grocery) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *grocery) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 21)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["description"] = g.Description
	g.fieldMap["address"] = g.Address
	g.fieldMap["city"] = g.City
	g.fieldMap["state"] = g.State
	g.fieldMap["country"] = g.Country
	g.fieldMap["postal_code"] = g.PostalCode
	g.fieldMap["phone_number"] = g.PhoneNumber
	g.fieldMap["email"] = g.Email
	g.fieldMap["position"] = g.Position
	g.fieldMap["opening_hours"] = g.OpeningHours
	g.fieldMap["closing_hours"] = g.ClosingHours
	g.fieldMap["is_open"] = g.IsOpen
	g.fieldMap["is_verified"] = g.IsVerified
	g.fieldMap["verification_token"] = g.VerificationToken
	g.fieldMap["verification_token_expiry"] = g.VerificationTokenExpiry
	g.fieldMap["status"] = g.Status
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g grocery) clone(db *gorm.DB) grocery {
	g.groceryDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g grocery) replaceDB(db *gorm.DB) grocery {
	g.groceryDo.ReplaceDB(db)
	return g
}

type groceryDo struct{ gen.DO }

type IGroceryDo interface {
	gen.SubQuery
	Debug() IGroceryDo
	WithContext(ctx context.Context) IGroceryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGroceryDo
	WriteDB() IGroceryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGroceryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGroceryDo
	Not(conds ...gen.Condition) IGroceryDo
	Or(conds ...gen.Condition) IGroceryDo
	Select(conds ...field.Expr) IGroceryDo
	Where(conds ...gen.Condition) IGroceryDo
	Order(conds ...field.Expr) IGroceryDo
	Distinct(cols ...field.Expr) IGroceryDo
	Omit(cols ...field.Expr) IGroceryDo
	Join(table schema.Tabler, on ...field.Expr) IGroceryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGroceryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGroceryDo
	Group(cols ...field.Expr) IGroceryDo
	Having(conds ...gen.Condition) IGroceryDo
	Limit(limit int) IGroceryDo
	Offset(offset int) IGroceryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGroceryDo
	Unscoped() IGroceryDo
	Create(values ...*models.Grocery) error
	CreateInBatches(values []*models.Grocery, batchSize int) error
	Save(values ...*models.Grocery) error
	First() (*models.Grocery, error)
	Take() (*models.Grocery, error)
	Last() (*models.Grocery, error)
	Find() ([]*models.Grocery, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Grocery, err error)
	FindInBatches(result *[]*models.Grocery, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Grocery) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGroceryDo
	Assign(attrs ...field.AssignExpr) IGroceryDo
	Joins(fields ...field.RelationField) IGroceryDo
	Preload(fields ...field.RelationField) IGroceryDo
	FirstOrInit() (*models.Grocery, error)
	FirstOrCreate() (*models.Grocery, error)
	FindByPage(offset int, limit int) (result []*models.Grocery, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGroceryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g groceryDo) Debug() IGroceryDo {
	return g.withDO(g.DO.Debug())
}

func (g groceryDo) WithContext(ctx context.Context) IGroceryDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groceryDo) ReadDB() IGroceryDo {
	return g.Clauses(dbresolver.Read)
}

func (g groceryDo) WriteDB() IGroceryDo {
	return g.Clauses(dbresolver.Write)
}

func (g groceryDo) Session(config *gorm.Session) IGroceryDo {
	return g.withDO(g.DO.Session(config))
}

func (g groceryDo) Clauses(conds ...clause.Expression) IGroceryDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groceryDo) Returning(value interface{}, columns ...string) IGroceryDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groceryDo) Not(conds ...gen.Condition) IGroceryDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groceryDo) Or(conds ...gen.Condition) IGroceryDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groceryDo) Select(conds ...field.Expr) IGroceryDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groceryDo) Where(conds ...gen.Condition) IGroceryDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groceryDo) Order(conds ...field.Expr) IGroceryDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groceryDo) Distinct(cols ...field.Expr) IGroceryDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groceryDo) Omit(cols ...field.Expr) IGroceryDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groceryDo) Join(table schema.Tabler, on ...field.Expr) IGroceryDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groceryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGroceryDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groceryDo) RightJoin(table schema.Tabler, on ...field.Expr) IGroceryDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groceryDo) Group(cols ...field.Expr) IGroceryDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groceryDo) Having(conds ...gen.Condition) IGroceryDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groceryDo) Limit(limit int) IGroceryDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groceryDo) Offset(offset int) IGroceryDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groceryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGroceryDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groceryDo) Unscoped() IGroceryDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groceryDo) Create(values ...*models.Grocery) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groceryDo) CreateInBatches(values []*models.Grocery, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groceryDo) Save(values ...*models.Grocery) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groceryDo) First() (*models.Grocery, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Grocery), nil
	}
}

func (g groceryDo) Take() (*models.Grocery, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Grocery), nil
	}
}

func (g groceryDo) Last() (*models.Grocery, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Grocery), nil
	}
}

func (g groceryDo) Find() ([]*models.Grocery, error) {
	result, err := g.DO.Find()
	return result.([]*models.Grocery), err
}

func (g groceryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Grocery, err error) {
	buf := make([]*models.Grocery, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groceryDo) FindInBatches(result *[]*models.Grocery, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groceryDo) Attrs(attrs ...field.AssignExpr) IGroceryDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groceryDo) Assign(attrs ...field.AssignExpr) IGroceryDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groceryDo) Joins(fields ...field.RelationField) IGroceryDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groceryDo) Preload(fields ...field.RelationField) IGroceryDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groceryDo) FirstOrInit() (*models.Grocery, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Grocery), nil
	}
}

func (g groceryDo) FirstOrCreate() (*models.Grocery, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Grocery), nil
	}
}

func (g groceryDo) FindByPage(offset int, limit int) (result []*models.Grocery, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groceryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groceryDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groceryDo) Delete(models ...*models.Grocery) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groceryDo) withDO(do gen.Dao) *groceryDo {
	g.DO = *do.(*gen.DO)
	return g
}
