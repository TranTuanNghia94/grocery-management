// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"grocery-management/internal/models"
)

func newInventory(db *gorm.DB, opts ...gen.DOOption) inventory {
	_inventory := inventory{}

	_inventory.inventoryDo.UseDB(db, opts...)
	_inventory.inventoryDo.UseModel(&models.Inventory{})

	tableName := _inventory.inventoryDo.TableName()
	_inventory.ALL = field.NewAsterisk(tableName)
	_inventory.ID = field.NewString(tableName, "id")
	_inventory.GroceryID = field.NewString(tableName, "grocery_id")
	_inventory.ProductID = field.NewString(tableName, "product_id")
	_inventory.Sku = field.NewString(tableName, "sku")
	_inventory.Barcode = field.NewString(tableName, "barcode")
	_inventory.CategoryID = field.NewString(tableName, "category_id")
	_inventory.ProductName = field.NewString(tableName, "product_name")
	_inventory.Quantity = field.NewInt32(tableName, "quantity")
	_inventory.UnitPrice = field.NewFloat64(tableName, "unit_price")
	_inventory.ExpiryDate = field.NewTime(tableName, "expiry_date")
	_inventory.ReorderLevel = field.NewInt32(tableName, "reorder_level")
	_inventory.InStock = field.NewBool(tableName, "in_stock")
	_inventory.InventoryStatus = field.NewString(tableName, "inventory_status")
	_inventory.CreatedBy = field.NewString(tableName, "created_by")
	_inventory.UpdatedBy = field.NewString(tableName, "updated_by")
	_inventory.CreatedAt = field.NewTime(tableName, "created_at")
	_inventory.UpdatedAt = field.NewTime(tableName, "updated_at")

	_inventory.fillFieldMap()

	return _inventory
}

type inventory struct {
	inventoryDo

	ALL             field.Asterisk
	ID              field.String
	GroceryID       field.String
	ProductID       field.String
	Sku             field.String
	Barcode         field.String
	CategoryID      field.String
	ProductName     field.String
	Quantity        field.Int32
	UnitPrice       field.Float64
	ExpiryDate      field.Time
	ReorderLevel    field.Int32
	InStock         field.Bool
	InventoryStatus field.String
	CreatedBy       field.String
	UpdatedBy       field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (i inventory) Table(newTableName string) *inventory {
	i.inventoryDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inventory) As(alias string) *inventory {
	i.inventoryDo.DO = *(i.inventoryDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inventory) updateTableName(table string) *inventory {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.GroceryID = field.NewString(table, "grocery_id")
	i.ProductID = field.NewString(table, "product_id")
	i.Sku = field.NewString(table, "sku")
	i.Barcode = field.NewString(table, "barcode")
	i.CategoryID = field.NewString(table, "category_id")
	i.ProductName = field.NewString(table, "product_name")
	i.Quantity = field.NewInt32(table, "quantity")
	i.UnitPrice = field.NewFloat64(table, "unit_price")
	i.ExpiryDate = field.NewTime(table, "expiry_date")
	i.ReorderLevel = field.NewInt32(table, "reorder_level")
	i.InStock = field.NewBool(table, "in_stock")
	i.InventoryStatus = field.NewString(table, "inventory_status")
	i.CreatedBy = field.NewString(table, "created_by")
	i.UpdatedBy = field.NewString(table, "updated_by")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *inventory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inventory) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 17)
	i.fieldMap["id"] = i.ID
	i.fieldMap["grocery_id"] = i.GroceryID
	i.fieldMap["product_id"] = i.ProductID
	i.fieldMap["sku"] = i.Sku
	i.fieldMap["barcode"] = i.Barcode
	i.fieldMap["category_id"] = i.CategoryID
	i.fieldMap["product_name"] = i.ProductName
	i.fieldMap["quantity"] = i.Quantity
	i.fieldMap["unit_price"] = i.UnitPrice
	i.fieldMap["expiry_date"] = i.ExpiryDate
	i.fieldMap["reorder_level"] = i.ReorderLevel
	i.fieldMap["in_stock"] = i.InStock
	i.fieldMap["inventory_status"] = i.InventoryStatus
	i.fieldMap["created_by"] = i.CreatedBy
	i.fieldMap["updated_by"] = i.UpdatedBy
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i inventory) clone(db *gorm.DB) inventory {
	i.inventoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i inventory) replaceDB(db *gorm.DB) inventory {
	i.inventoryDo.ReplaceDB(db)
	return i
}

type inventoryDo struct{ gen.DO }

type IInventoryDo interface {
	gen.SubQuery
	Debug() IInventoryDo
	WithContext(ctx context.Context) IInventoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInventoryDo
	WriteDB() IInventoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInventoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInventoryDo
	Not(conds ...gen.Condition) IInventoryDo
	Or(conds ...gen.Condition) IInventoryDo
	Select(conds ...field.Expr) IInventoryDo
	Where(conds ...gen.Condition) IInventoryDo
	Order(conds ...field.Expr) IInventoryDo
	Distinct(cols ...field.Expr) IInventoryDo
	Omit(cols ...field.Expr) IInventoryDo
	Join(table schema.Tabler, on ...field.Expr) IInventoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInventoryDo
	Group(cols ...field.Expr) IInventoryDo
	Having(conds ...gen.Condition) IInventoryDo
	Limit(limit int) IInventoryDo
	Offset(offset int) IInventoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryDo
	Unscoped() IInventoryDo
	Create(values ...*models.Inventory) error
	CreateInBatches(values []*models.Inventory, batchSize int) error
	Save(values ...*models.Inventory) error
	First() (*models.Inventory, error)
	Take() (*models.Inventory, error)
	Last() (*models.Inventory, error)
	Find() ([]*models.Inventory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Inventory, err error)
	FindInBatches(result *[]*models.Inventory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Inventory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInventoryDo
	Assign(attrs ...field.AssignExpr) IInventoryDo
	Joins(fields ...field.RelationField) IInventoryDo
	Preload(fields ...field.RelationField) IInventoryDo
	FirstOrInit() (*models.Inventory, error)
	FirstOrCreate() (*models.Inventory, error)
	FindByPage(offset int, limit int) (result []*models.Inventory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInventoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i inventoryDo) Debug() IInventoryDo {
	return i.withDO(i.DO.Debug())
}

func (i inventoryDo) WithContext(ctx context.Context) IInventoryDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inventoryDo) ReadDB() IInventoryDo {
	return i.Clauses(dbresolver.Read)
}

func (i inventoryDo) WriteDB() IInventoryDo {
	return i.Clauses(dbresolver.Write)
}

func (i inventoryDo) Session(config *gorm.Session) IInventoryDo {
	return i.withDO(i.DO.Session(config))
}

func (i inventoryDo) Clauses(conds ...clause.Expression) IInventoryDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inventoryDo) Returning(value interface{}, columns ...string) IInventoryDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inventoryDo) Not(conds ...gen.Condition) IInventoryDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inventoryDo) Or(conds ...gen.Condition) IInventoryDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inventoryDo) Select(conds ...field.Expr) IInventoryDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inventoryDo) Where(conds ...gen.Condition) IInventoryDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inventoryDo) Order(conds ...field.Expr) IInventoryDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inventoryDo) Distinct(cols ...field.Expr) IInventoryDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inventoryDo) Omit(cols ...field.Expr) IInventoryDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inventoryDo) Join(table schema.Tabler, on ...field.Expr) IInventoryDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inventoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inventoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IInventoryDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inventoryDo) Group(cols ...field.Expr) IInventoryDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inventoryDo) Having(conds ...gen.Condition) IInventoryDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inventoryDo) Limit(limit int) IInventoryDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inventoryDo) Offset(offset int) IInventoryDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inventoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inventoryDo) Unscoped() IInventoryDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inventoryDo) Create(values ...*models.Inventory) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inventoryDo) CreateInBatches(values []*models.Inventory, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inventoryDo) Save(values ...*models.Inventory) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inventoryDo) First() (*models.Inventory, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Inventory), nil
	}
}

func (i inventoryDo) Take() (*models.Inventory, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Inventory), nil
	}
}

func (i inventoryDo) Last() (*models.Inventory, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Inventory), nil
	}
}

func (i inventoryDo) Find() ([]*models.Inventory, error) {
	result, err := i.DO.Find()
	return result.([]*models.Inventory), err
}

func (i inventoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Inventory, err error) {
	buf := make([]*models.Inventory, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inventoryDo) FindInBatches(result *[]*models.Inventory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inventoryDo) Attrs(attrs ...field.AssignExpr) IInventoryDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inventoryDo) Assign(attrs ...field.AssignExpr) IInventoryDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inventoryDo) Joins(fields ...field.RelationField) IInventoryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inventoryDo) Preload(fields ...field.RelationField) IInventoryDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inventoryDo) FirstOrInit() (*models.Inventory, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Inventory), nil
	}
}

func (i inventoryDo) FirstOrCreate() (*models.Inventory, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Inventory), nil
	}
}

func (i inventoryDo) FindByPage(offset int, limit int) (result []*models.Inventory, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inventoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inventoryDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inventoryDo) Delete(models ...*models.Inventory) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inventoryDo) withDO(do gen.Dao) *inventoryDo {
	i.DO = *do.(*gen.DO)
	return i
}
